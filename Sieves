#include <iostream>
using namespace std;
#define int long long
const int MAX = 1e5+1;
int mod = 1e9 + 7;
int fact[MAX],invfact[MAX],factorize[MAX];
bool isPrime[MAX];
int binpow(int a,int b){
    int res=1;
    while(b){
        if(b&1)res = (res*a)%mod;
        b/=2, a= (a*a)%mod;
    }
    return res;
}
void factorialSieve(){
    fact[0]=invfact[0]=1;
    for(int i=1;i<=MAX;i++){
        fact[i] = (fact[i-1]*i)%mod;
    }
    invfact[MAX] = binpow(fact[MAX],mod-2);
    for(int i=MAX;i>=1;i--)invfact[i-1] = (invfact[i]*i)%mod;
    return ;
}
void primeSieve(){
    for(int i=1;i<=MAX;i++){
        isPrime[i] = true;
    }
    isPrime[1]=false;
    for(int i=2;i*i<=MAX;i++){
        if(isPrime[i])  
            for(int j=i*i;j<=MAX;j+=i)isPrime[j]=false;
    }
}
void primeFactorSieve(){
    for(int i=1;i<=MAX;i++){
        factorize[i] = i;
    }
    for(int i=2;i*i<=MAX;i++){
        if(factorize[i]!=i)  
            for(int j=i*i;j<=MAX;j+=i)factorize[j]=i;
    }
}
int solve(){
    int res =0;
    return res;
}
signed main()
{
    int t=1;
    cin >> t;
    while(t--){
        cout << solve() << endl;
    }
    return 0;
}
